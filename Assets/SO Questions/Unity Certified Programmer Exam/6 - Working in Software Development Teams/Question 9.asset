%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c91b368abd5b3b74b9ae42fb0874b63a, type: 3}
  m_Name: Question 9
  m_EditorClassIdentifier: 
  question: 'A MonoBehaviour script contains the following variable to store a character''s
    maximum health:

    

    public float m_MaxHealth

    

    The value
    is exposed in the Unity Editor to be set by the design team. Its value must be
    between 0 and 100.

    

    What is the most user-friendly way for the Programmer
    to enforce this constraint?'
  wrongAnswer1: Clamp the value in the OnValidate event.
  wrongAnswer2: Add a [Tooltip] attribute that states the valid range.
  wrongAnswer3: Change the variable name to MaxHealth_0_to_100.
  correctAnswer: Use the [Range] attribute.
  showAnswer: 'You should use the [Range] attribute to enforce this constraint. An
    int or float that uses this attribute appears as a slider instead of a number
    field. You can enforce the range by passing two numbers as the parameter, such
    as [Range(0, 10)].

    

    You should not add a [Tooltip] attribute to enforce
    this constraint. The tooltip displays a defined string that provides information
    for the user about the variable. It does not strictly enforce a constraint, and
    the user could still input values outside of the intended range.

    

    You
    should not change the variable name to MaxHealth_0_to_100 to enforce this constraint.
    Even if the name signifies the intention, it does not enforce a constraint, and
    the user could still input values outside of the intended range.

    

    You
    should not clamp the value in the OnValidate event to enforce this constraint.
    This method can successfully force the variable to be within a certain range
    because OnValidate is run whenever a variable is changed in the inspector. However,
    for the user, there is no visual indication of the available range for the value.'

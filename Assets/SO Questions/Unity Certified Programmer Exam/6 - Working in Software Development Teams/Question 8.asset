%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c91b368abd5b3b74b9ae42fb0874b63a, type: 3}
  m_Name: Question 8
  m_EditorClassIdentifier: 
  question: 'The designer needs a large set of objects that share some traits, such
    as water, fire, electricity, steam, rock, glass, and metal. The designer needs
    to set relationships between these traits without engaging a Programmer each
    time. The designer also needs to create and delete traits as needed.

    

    The
    set of traits and objects is large. Potential for human error must be minimized.

    

    How
    should this functionality be implemented?'
  wrongAnswer1: Expose a String property and let the designer type in the trait names
    for comparison.
  wrongAnswer2: Create an Enum with all potential traits and let the designer make
    the connections in a global datastore.
  wrongAnswer3: Generate a comparison table for editing in an external program as
    a spreadsheet.
  correctAnswer: Create a ScriptableObject and let the designer create the instances
    needed to do comparisons.
  showAnswer: 'You should create a ScriptableObject and let the designer create the
    instances needed to perform comparisons. ScriptableObjects can store large quantities
    of data that can be used by the script logic. This arrangement keeps things modular
    and easy to edit by designers, allowing them to piece components together without
    approaching a Programmer.

    

    You should not create an Enum with all
    potential traits and let the designer make the connections in a global datastore.
    This method leaves considerable room for human error because the logic is dependent
    on the global datastore. Because a trait may potentially be deleted, changes
    would be required in the global datastore as well after the Enum class is changed.

    

    You
    should not expose a String property and let the designer type the trait names
    for comparison. The name of the trait should not be used as a representation
    of the trait itself. If a trait''s name must be changed in the future, all previous
    comparison setups must be readjusted for that trait. Also, this method opens
    up the possibility for typographical errors on the designer''s part.

    

    You
    should not generate a comparison table for editing in an external program as
    a spreadsheet. Although this may be convenient for designers, it requires work
    on the Programmer''s part to take the spreadsheet data and use it to make connections
    in Unit. (For example, objects and classes that can load the matching data must
    be created.)'

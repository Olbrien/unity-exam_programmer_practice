%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c91b368abd5b3b74b9ae42fb0874b63a, type: 3}
  m_Name: Question 7
  m_EditorClassIdentifier: 
  question: 'A Programmer is developing an AR application that recognizes an image
    target to load appropriate content from the cloud. The Programmer decides to
    organize different assets in the project into AssetBundles to reduce the overall
    app size.

    

    Which of the following is an appropriate way to organize
    assets into AssetBundles?'
  wrongAnswer1: '1. There is an AssetBundle for all assets loaded per scene.

    2.
    The project contains none of the bundled assets.'
  wrongAnswer2: '1. There is an AssetBundle for each model prefab with all its dependencies
    like material, textures, and scripts.

    2. The project contains all scripts.'
  wrongAnswer3: '1. There is an AssetBundle for all materials, textures, and scripts.

    2.
    There is an AssetBundle for each 3D model with dependencies on the material bundle.

    3.
    The project contains none of the bundled assets.'
  correctAnswer: '1. There is an AssetBundle for all materials and textures.

    2.
    There is an AssetBundle for each 3D model with dependencies on the material bundle.

    3.
    The project contains all scripts.'
  showAnswer: 'You should organize assets into AssetBundles. It is best to keep the
    3D models and materials/textures as separate bundles in order to express dependencies.
    If two different 3D models need to reference the same material, this could create
    a dependency on the materials bundle.

    

    You should not use scripts
    to organize assets into AssetBundles. Scripts included in AssetBundles cannot
    execute and are only included as TextAssets.

    

    You should not use
    two models from separate AssetBundles to organize assets into AssetBundles. If
    they depend on the same material, you would have two copies of the same material.
    You should have an AssetBundle for each type of asset for a safer dependency
    structure.

    

    You should not use an AssetBundle for all assets loaded
    in a scene to organize assets into AssetBundles. You should put different types
    of assets into their own AssetBundle so that the appropriate dependencies are
    referenced instead of copied. Also, script assets included in AssetBundles cannot
    be executed and will instead be included as TextAssets.'

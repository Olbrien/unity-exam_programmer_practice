%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c91b368abd5b3b74b9ae42fb0874b63a, type: 3}
  m_Name: Question 11
  m_EditorClassIdentifier: 
  question: 'A game allows players to forge new items between levels. The mechanics
    and art for the forging are contained within a scene. Included in the scene is
    a particle system that is active but not emitting when the player first enters
    the scene. If the player chooses to forge an item the particle system begins
    emitting, sparks to fly out of the forge. Due to technical requirements, the
    scene is never unloaded.


    Currently the particle system, cached as forgeParticles,
    is experiencing an issue. When the player enters the forge scene for the first
    time, forgeParticles is not playing. If the player forges an item, it works as
    intended. But the next time the player enters the forge scene, forgeParticles
    is still playing. The script that controls the particle system executes forgeParticles.Clear()
    when the player exits the scene, and the particle system has Play On Awake disabled.


    What
    should the Programmer do to solve the issue?'
  wrongAnswer1: Execute forgeParticles.Clear(true) instead of forgeParticles.Clear().
  wrongAnswer2: Execute forgeParticles.Pause() instead of forgeParticles.Clear().
  wrongAnswer3: Execute forgeParticles.Emit(0) before forgeParticles.Clear().
  correctAnswer: Execute forgeParticles.Stop() before forgeParticles.Clear().
  showAnswer: 'The Programmer should execute forgeParticles.Stop() before forgeParticles.Clear().
    This will instruct the particle system to cease emitting particles. Clear() will
    immediately remove any active particles and is useful for cleaning up a scene
    of unnecessary particles. However, Clear() will not prevent further particles
    from being spawned, so Stop() is required.


    The Programmer should not execute
    forgeParticles.Clear(true). This will not keep more particles from being spawned.
    By passing a Boolean value with Clear(), child particle systems will be instructed
    to also Clear or not.


    The Programmer should not execute forgeParticles.Emit(0).
    This is used to immediately spawn a number of particles independent of the normal
    emit rate or burst. Calling Emit(0) will spawn zero particles, but it will not
    set the emit value to 0.


    The Programmer should not execute forgeParticles.Pause()
    instead of forgeParticles.Clear(). This will freeze the current particles in
    place. While no further particles will be spawned, the sparks will be visible
    when the player returns to the scene.'

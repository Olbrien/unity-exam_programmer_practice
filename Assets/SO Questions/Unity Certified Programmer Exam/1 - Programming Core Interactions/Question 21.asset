%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c91b368abd5b3b74b9ae42fb0874b63a, type: 3}
  m_Name: Question 21
  m_EditorClassIdentifier: 
  question: "The following code is attached to a Camera:\r\n\r\npublic class CamFollow
    : MonoBehaviour {\r\n         public float viewWidth = 2f;\r\n         public
    Transform focalTarget;\r\n         private Camera cam;\r\n\r\n         private
    void Awake() \r\n\t {\r\n             cam = this.GetComponent<Camera>();\r\n        
    }\r\n\r\n         private void Update() \r\n\t {\r\n             this.transform.LookAt(focalTarget);\r\n            
    cam.fieldOfView = GetFOV(Vector3.Distance(this.transform.position, focalTarget.position));
    // Line #12\r\n         }\r\n\r\n         private float GetFOV(float difference)
    \r\n\t {\r\n             return 2f * Mathf.Tan(0.5f * viewWidth / difference);
    // Line #16\r\n         }\r\n     }\r\nThe intended functionality is to have
    the Camera track the object assigned to focalTarget, and to always keep the target
    filling the screen horizontally. The Camera's FOV Axis is set to Horizontal,
    and the viewWidth is correctly set. Despite this, the screen is not being correctly
    filled by the focalTarget.\r\n\r\nWhat changes must the Programmer make to achieve
    the desired functionality."
  wrongAnswer1: Do not multiply viewWidth by 0.5f on Line #16 and Replace Vector3.Distance
    on Line #12 with Mathf.DeltaAngle.
  wrongAnswer2: Use Camera.HorizontalToVerticalFieldOfView on Line #12 and Remove
    Mathf.Tan and replace it with Mathf.Cos on Line #16.
  wrongAnswer3: Multiply the result of Line #16 by Mathf.Rad2Deg and Replace Vector3.Distance
    on Line #12 with Mathf.DeltaAngle.
  correctAnswer: Use Camera.HorizontalToVerticalFieldOfView on Line #12 and Multiply
    the result of Line #16 by Mathf.Rad2Deg.
  showAnswer: 'The Programmer should multiply the result of Line #16 by Mathf.Rad2Deg.
    Mathf trigonometry methods work in radians, but the Camera.fieldOfView works
    in degrees. Therefore a conversion from radian to degrees is required for an
    accurate field of view.


    The Programmer must also use Camera.HorizontalToVerticalFieldOfView
    on Line #12.  By passing in the result of GetFOV and the aspect ratio of the
    Camera (cam.aspect), the correct field of view for a horizontal fit will be applied
    to cam.fieldOfView. While the Camera may have the FOV Axis set to Horizontal,
    values passed to the fieldOfView parameter work on a vertical axis.


    The
    Programmer should not remove the 0.5f multiplier of viewWidth on Line #16. Because
    the distance between the Camera and the focalTarget is passed into GetFOV, the
    variable difference will act as the adjacent leg of a right triangle. This leg
    bisects the screen, and viewWidth reflects how wide the screen should be. Since
    that number will act as the opposite leg of the triangle, viewWidth must be halved.


    The
    Programmer should not replace Vector3.Distance on Line #12 with Mathf.DeltaAngle.
    Vector3.Distance supplies the distance from the Camera to the focalTarget and
    is important in the Mathf.Tan operation. Vector3.DeltaAngle takes in two float
    values and calculates the minimum difference between the two as if they were
    angles. This would not aid the calculation of GetFOV.


    The Programmer should
    not Replace Mathf.Tan with Mathf.Cos on Line #16. While the hypotenuse of the
    right triangle could be calculated in GetFOV, this is extra work that is unnecessary.
    Mathf.Cos works on the ratio of the adjacent leg to the hypotenuse. Even if the
    extra work was deemed acceptable, the operation would return the exact same value
    and would therefore not fix the issue.'

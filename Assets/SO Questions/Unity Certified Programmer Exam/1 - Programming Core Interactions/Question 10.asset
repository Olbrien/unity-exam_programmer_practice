%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c91b368abd5b3b74b9ae42fb0874b63a, type: 3}
  m_Name: Question 10
  m_EditorClassIdentifier: 
  question: 'A Programmer is working on a game where the target platforms are iOS
    and Android devices. The studio wants to release for PC and console platforms
    immediately if the initial release is successful. The Input Manager is customized
    more toward mobile. The studio requires that development time be minimized for
    each new platform release.

    

    What should the Programmer do to minimize
    development time for multiple platforms?'
  wrongAnswer1: Use Input.GetTouch()
  wrongAnswer2: Create unique InputManager entries for each platform
  wrongAnswer3: Use Input.GetAxis()
  correctAnswer: Create custom Input class
  showAnswer: 'You should create a custom Input class to minimize development time
    for multiple platforms. This allows you to concentrate and customize all the
    input logic for your game in a single place on your project, which is easier
    to extend and maintain when you decide to expand for other platforms.

    

    You
    should not create unique InputManager entries for each platform to minimize development
    time for multiple platforms. This requires you to check which platform you are
    running before deciding which entry in the InputManager to check. This would
    be necessary for every component in your game that depends on inputs.

    

    You
    should not use Input.GetAxis() to minimize developmenttime for multiple platforms.
    Although Input.GetAxis() is a handy way to check for keyboard and joypad inputs,
    it is not appropriate for mobile platforms because touches do not map directly
    into axes.

    

    You should not use Input.GetTouch() to minimize development
    time for multiple platforms. Although Input.GetTouch() is appropriate for mobile
    platforms, it does not work on PCs or consoles because they usually do not have
    a touch interface.'

%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c91b368abd5b3b74b9ae42fb0874b63a, type: 3}
  m_Name: Question 15
  m_EditorClassIdentifier: 
  question: 'In a VR demo, the player can access a menu positioned on their non-dominant
    forearm at any time. By default, this is the left forearm. The menu is a Worldspace
    UI Canvas attached to the player character''s forearm. Using the menu, the player
    can pause the game and bring up game settings, choose what virtual tool they
    have in game, and change the music. Input is handled with the finger of the player''s
    dominant hand, which is right by default. The menu should not be active while
    not in the view of the player.

    

    How should the Programmer set up
    input for the UI menu?

'
  wrongAnswer1: Attach a Collider2D to each UI Button, and a Collider2D to the tip
    of the dominant finger.
  wrongAnswer2: Use Physics.Raycast along the forward vector of the dominant finger,
    with a layer mask that only includes the UI buttons.
  wrongAnswer3: Attach a Collider to each UI Button and a Collider to the tip of
    the dominant finger.
  correctAnswer: Convert the position of the dominant finger using WorldToScreenPoint,
    and cast a ray at the result using GraphicRaycaster.Raycast.
  showAnswer: 'The Programmer should convert the position of the dominant finger
    using WorldToScreenPoint, and then cast a ray at the result using GraphicRaycaster.Raycast.
    This is accomplished by storing the converted position in the position variable
    of an EventSystems.PointerEventData. If the finger is off screen, no ray is cast,
    and if the UI menu is off screen, the finger cannot interact with it.

    

    The
    Programmer should not use Physics.Raycast. This could cause a button to be pressed
    while the menu or finger is off screen. For the same reason, the Programmer should
    not use Colliders on the buttons and finger for interactions.

    

    The
    Programmer cannot use Collider2D because this is a 3D game, and Collider2D operates
    only on two axes.'

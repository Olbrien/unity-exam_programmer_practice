%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c91b368abd5b3b74b9ae42fb0874b63a, type: 3}
  m_Name: Question 12
  m_EditorClassIdentifier: 
  question: 'A Programmer must create the UI for a VR application. This UI exists
    as a 3D plane that is moved to be coplanar with a nearby surface. The Programmer
    notices that the UI canvas Z-fights with the surface that it is projected onto.

    

    What
    is the most efficient way to solve this issue?'
  wrongAnswer1: Offset the UI material's render queue to render after opaque geometry.
  wrongAnswer2: Add the decal:blend pragma parameter to the UI material's shader.
  wrongAnswer3: Adjust the near and far clipping planes of the camera.
  correctAnswer: Offset the canvas by a fraction of the surface's normal.
  showAnswer: 'You should offset the canvas by a fraction of the surface''s normal
    to solve this issue. The surface''s normal is a vector or line that is perpendicular
    to the surface. Z-fighting occurs when multiple planes occupy the same space,
    and the pixels are rendered arbitrarily, which results in flickering. The simplest
    way to fix this is to move the canvas slightly in front of the surface.

    

    You
    should not add the decal:blend pragma parameter to the UI material''s shader
    to solve this issue. This shader parameter affects semitransparency and can be
    used to blend the alpha of two surfaces. You do not need to change shader settings
    to fix Z-fighting.

    

    You should not adjust the near and far clipping
    planes of the camera to solve this issue. The clipping planes settings determine
    the distances where the camera will start and stop rendering. Z-fight is caused
    when multiple planes occupy the same space, not where they are rendered.

    

    You
    should not offset the UI material''s render queue to render after opaque geometry
    to solve this issue. The render queue only determines which object is rendered
    first, not whether it is rendered in front. Because the Z-buffer normally determines
    the depth visibility (unless it uses a shader that ignores Z-buffer), the render
    queue has no effect on the Z-fighting.'

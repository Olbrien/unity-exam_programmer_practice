%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c91b368abd5b3b74b9ae42fb0874b63a, type: 3}
  m_Name: Question 16
  m_EditorClassIdentifier: 
  question: 'A Programmer is creating a camera system for a virtual reality (VR)
    first-person view and wants to implement a binocular mode to let the user zoom
    in and out on distant objects. The Programmer will adjust the camera''s fieldOfView
    for this mode. When transitioning to this mode, the Programmer wants to avoid
    sharp acceleration and stop the adjustment at the exact final fieldOfView value
    desired without extraneous movement.


    What two functions can the Programmer
    use to meet these requirements?'
  wrongAnswer1: Mathf.Lerp() and Mathf.SmoothDamp()
  wrongAnswer2: Mathf.MoveTowards() and Mathf.Lerp()
  wrongAnswer3: Mathf.SmoothStep() and Mathf.MoveTowards()
  correctAnswer: Mathf.SmoothStep() and Mathf.SmoothDamp()
  showAnswer: 'You could use Mathf.SmoothDamp() to meet these requirements. The SmoothDamp
    method provides the ease in and ease out features in addition to preventing the
    overshot of the final fieldOfView value.


    You could also use Mathf. SmoothStep
    () to meet these requirements. The SmoothStep method is very similar to the linear
    interpolation (lerp) method. The difference is that it automatically applies
    the ease in and ease out effects. This will also never overshoot the desired
    fieldOfView value.


    You should not use Mathf.Lerp() to meet these requirements.
    The lerp method is used to interpolate between two float values without any ease
    effect unless it is implemented manually.


    You should not use Mathf.MoveTowards()
    to meet these requirements. This method ensures no overshoot but it does not
    provide any ease in or out, and therefore may have sharp accelerations.'

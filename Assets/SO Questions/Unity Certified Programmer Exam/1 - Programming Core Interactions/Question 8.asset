%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c91b368abd5b3b74b9ae42fb0874b63a, type: 3}
  m_Name: Question 8
  m_EditorClassIdentifier: 
  question: "An application has the user place Flora around a Tower. The Flora can
    be a variety of trees and bushes. Any Flora placed will spawn an identical Flora
    on the opposite side of the Tower, equidistant from the Tower. If a straight
    line is drawn from the two Flora objects, the Tower will be in the middle of
    the line. The y value of the Tower and every Flora will always be 0.\r\n\r\nThe
    Tower's world position is cached into a Vector3 named towerPosition.  A Programmer
    is writing the following method:\r\n\r\n    public Vector3 GetOppositePointOfTower(Vector3
    originalPosition)\r\n    {\r\n\r\n    }\r\n\r\nWhat should the Programmer write
    in the body of the method so that it returns a point on the opposite side of
    the Tower from where the first Flora's original position is?"
  wrongAnswer1: return Vector3.Cross(originalPosition, towerPosition);
  wrongAnswer2: return Vector3.Cross(towerPosition, originalPosition);
  wrongAnswer3: return towerPosition - (towerPosition - originalPosition);
  correctAnswer: return towerPosition - (originalPosition - towerPosition);
  showAnswer: "The Programmer should include the following:\r\n\r\n    return {towerPosition
    - (originalPosition - towerPosition)};\r\n\r\nTo find the vector from the Tower
    to a Flora, you need to subtract towerPosition from originalPosition.  This is
    the distance on every axis to reach that Flora from the Tower. Thus, if you add
    that vector to Tower, you will get the position of the Flora. If you subtract
    that vector from the position of the Tower, you get the opposite position of
    the Flora, relative to the Tower.\r\n\r\nThe Programmer should not use the following:\r\n\r\n   
    return {towerPosition - (towerPosition - originalPosition)};\r\n\r\nThis would
    simply return the position of the Flora. By subtracting originalPosition from
    towerPosition, you get the vector from the Flora to the Tower. This is the distance
    on every axis to reach the Tower from the Flora, which could be useful, but the
    Programmer would have to add that to the Tower's position, not subtract it.\r\n\r\nThe
    Programmer should not use Vector3.Cross. This finds the cross product of two
    Vectors. The cross product is a vector that has a direction that sits at a right
    angle to the two input vectors.  Regardless of what order towerPosition and originalPosition
    are supplied, Vector3.Cross would yield a position that would not place a second
    Flora on the opposite side of the Tower, but instead would move up or down on
    the Y axis depending on the position of the original Flora."

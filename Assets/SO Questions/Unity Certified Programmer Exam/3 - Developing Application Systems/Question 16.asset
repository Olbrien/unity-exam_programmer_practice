%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: c91b368abd5b3b74b9ae42fb0874b63a, type: 3}
  m_Name: Question 16
  m_EditorClassIdentifier: 
  question: 'A Programmer is creating a game that must save the user''s level each
    time the user passes a level. Levels are numbered 1 through 50.

    

    The
    Programmer wants to write code to save the user''s level on the user''s device.

    

    What
    should the Programmer do?'
  wrongAnswer1: Call the SendMessage method of the GameObject class. Pass in the
    level to save as the second parameter to SendMessage.
  wrongAnswer2: Call the Log method of the Logger class. Pass to it LogType.Assert
    and a JSON-serialized object representing the level to save locally.
  wrongAnswer3: Implement the OnPlayerConnected method of the Network class. Call
    the SendMessage method of the GameObject class, passing to it a NetworkPlayer
    instance and the level.
  correctAnswer: Call the SetInt method of the PlayerPrefs class, passing to it the
    level to save. Call the Save method of the PlayerPrefs class.
  showAnswer: 'The Programmer should call the SetInt method of the PlayerPrefs class,
    passing to it the level to save. The first parameter of the method is the key.
    You can name this anything, such as CurrentLevel. The Programmer should then
    call the Save method of the PlayerPrefs class. This saves the data to the device.

    

    The
    Programmer should not call the SendMessage method of the GameObject class. The
    SendMessage method calls the method specified as the first parameter on every
    MonoBehaviour-derived class in the game. The second parameter specifies an argument
    that should be passed to the method represented by the first parameter.

    

    The
    Programmer should not implement the OnPlayerConnected method of the Network class.
    This method is called when a new player is added to the game.

    

    The
    Programmer should not call the Log method of the Logger class. This method does
    not save levels as user data. It allows you to log errors, warnings, exceptions,
    and assertions for debugging and troubleshooting purposes.'
